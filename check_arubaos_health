#!/usr/bin/perl -w

package SNMP;
	use strict;
	use Data::Dumper;

# HP-VSF-VC-MIB::hpicfVsfVCLinkName.1.1 = STRING: I-Link1_1
# HP-VSF-VC-MIB::hpicfVsfVCLinkName.1.2 = STRING: I-Link1_2
# HP-VSF-VC-MIB::hpicfVsfVCLinkName.2.1 = STRING: I-Link2_1
# HP-VSF-VC-MIB::hpicfVsfVCLinkName.2.2 = STRING: I-Link2_2
# HP-VSF-VC-MIB::hpicfVsfVCLinkName.3.1 = STRING: I-Link3_1
# HP-VSF-VC-MIB::hpicfVsfVCLinkName.3.2 = STRING: I-Link3_2
# HP-VSF-VC-MIB::hpicfVsfVCLinkName.4.1 = STRING: I-Link4_1
# HP-VSF-VC-MIB::hpicfVsfVCLinkName.4.2 = STRING: I-Link4_2
# HP-VSF-VC-MIB::hpicfVsfVCLinkOperStatus.1.1 = INTEGER: up(1)
# HP-VSF-VC-MIB::hpicfVsfVCLinkOperStatus.1.2 = INTEGER: up(1)
# HP-VSF-VC-MIB::hpicfVsfVCLinkOperStatus.2.1 = INTEGER: up(1)
# HP-VSF-VC-MIB::hpicfVsfVCLinkOperStatus.2.2 = INTEGER: up(1)
# HP-VSF-VC-MIB::hpicfVsfVCLinkOperStatus.3.1 = INTEGER: up(1)
# HP-VSF-VC-MIB::hpicfVsfVCLinkOperStatus.3.2 = INTEGER: up(1)
# HP-VSF-VC-MIB::hpicfVsfVCLinkOperStatus.4.1 = INTEGER: up(1)
# HP-VSF-VC-MIB::hpicfVsfVCLinkOperStatus.4.2 = INTEGER: up(1)
#
	my $nametable={
		"sysDescr"		=> { oid => ".1.3.6.1.2.1.1.1" },
		"sysName"		=> { oid => ".1.3.6.1.2.1.1.5" },
		"hpSwitchOsVersion"	=> { oid => ".1.3.6.1.4.1.11.2.14.11.5.1.1.3" },
		"hpSystemAirCurrentTemp" => { oid => ".1.3.6.1.4.1.11.2.14.11.1.2.8.1.1.3" },
		"hpSwitchDefaultBoot" 	=> { oid => ".1.3.6.1.4.1.11.2.14.11.5.1.59.1.1",
			value => "table",
			values => {
				'1' => 'primary',
				'2' => 'secondary'
			}
		},
		"hpSwitchFlashImageVersion" => { oid => '.1.3.6.1.4.1.11.2.14.11.5.1.59.1.3.1.4' },
		"hpSystemAirOverTemp" => { oid => ".1.3.6.1.4.1.11.2.14.11.1.2.8.1.1.6",
			value => "table",
			values => {
				1 => "yes",
				2 => "no"
			},
		},
		"hpicfPsState" => { oid => ".1.3.6.1.4.1.11.2.14.11.5.1.55.1.1.1.2",
			value => "table",
			values => {
				1 => 'psNotPresent',
				2 => 'psNotPlugged',
				3 => 'psPowered',
				4 => 'psFailed',
				5 => 'psPermFailure',
				6 => 'psMax',
				7 => 'AuxFailure',
				8 => 'NotPowered',
				9 => 'AuxNotPowered'
			}
		},
		"hpicfVsfVCOperStatus" => { oid => ".1.3.6.1.4.1.11.2.14.11.5.1.116.1.1.2",
			value => "table",
			values => {
				0 => "unAvailable",
				1 => "disabled",
				2 => "active",
				3 => "fragmentInactive",
				4 => "fragmentActive",
			}
		},

		"hpicfVsfVCAdminStatus" => { oid => ".1.3.6.1.4.1.11.2.14.11.5.1.116.1.1.3",
			value => "table",
			values => {
				1 => "enabled",
				2 => "disabled"
			}
		},

		"hpicfVsfVCMemberState" => { oid => ".1.3.6.1.4.1.11.2.14.11.5.1.116.1.3.1.9",
			value => "table",
			values => {
				0 => "unusedId",
				1 => "missing",
				2 => "provision",
				3 => "commander",
				4 => "standby",
				5 => "member",
				6 => "shutdown",
				7 => "booting",
				8 => "communicationFailure",
				9 => "incompatibleOS",
				10 => "unknownState",
				11 => "standbyBooting"
			}
		},
		"hpicfSensorStatus" => { oid => ".1.3.6.1.4.1.11.2.14.11.1.2.6.1.4",
			value => "table",
			values => {
				1 => "unknown",
				2 => "bad",
				3 => "warning",
				4 => "good",
				5 => "notPresent"
			}
		},
		"hpicfSensorDescr" => { oid => ".1.3.6.1.4.1.11.2.14.11.1.2.6.1.7" },

		"hpStackOperStatus" => { oid => ".1.3.6.1.4.1.11.2.14.11.5.1.69.1.1.2",
			value => "table",
			values => {
				0 => "unAvailable",
				1 => "disabled",
				2 => "active",
				3 => "fragmentInactive",
				4 => "fragmentActive",
			}
		},
		"hpStackMemberEntryStatus" => { oid => ".1.3.6.1.4.1.11.2.14.11.5.1.69.1.3.1.7",
			value => "table",
			values => {
				1 => "active",
				2 => "notInService",
				3 => "notReady",
				4 => "createAndGo",
				5 => "createAndWait",
				6 => "destroy"	
			}
		},
		"hpStackMemberState" => { oid => ".1.3.6.1.4.1.11.2.14.11.5.1.69.1.3.1.9",
			value => "table",
			values => {
				0 => "unusedId",
				1 => "missing",
				2 => "provision",
				3 => "commander",
				4 => "standby",
				5 => "member",
				6 => "shutdown",
				7 => "booting",
				8 => "communicationFailure",
				9 => "incompatibleOS",
				10 => "unknownState",
				11 => "standbyBooting"
			}
		},
		"hpicfFanState" => { oid => ".1.3.6.1.4.1.11.2.14.11.5.1.54.2.1.1.4",
			value => "table",
			values => {
				0 => "failed",
				1 => "removed",
				2 => "off",
				3 => "underspeed",
				4 => "overspeed",
				5 => "ok",
				6 => "maxstate"
			}
		}
	};

	sub new {
		my ($class, $host, $community) = @_;

		my $self={};
		bless $self, $class;

		$self->reversemap();
		$self->snmp_new_session($host, $community);

		return $self;
	}

	sub snmp_new_session {
		my ($self, $host, $community) = @_;

                my ($session,$error)=Net::SNMP->session(
			Hostname => $host,
			Version	 => 2,
			Timeout  => 2,
			Community => $community
		);

		$self->{netsnmp}=$session;
	}

	sub reversemap {
		my ($self) = @_;
		foreach my $key ( keys %{$nametable} ) {
			my $value=$nametable->{$key};
			$self->{reversetable}{$value->{oid}}=$key;
		}
	}

	sub name2oid {
		my ($self, $mixname) = @_;

		my ($name, $instance) = ($mixname =~ /^([^.]+)([\d\.]*)$/);
		my $oid=$nametable->{$name}{oid} . $instance;

		#printf("Mixname $mixname Name: $name instance $instance oid $oid\n");

		return $oid;
	}

	sub oid2name {
		my ($self, $oid) = @_;
		my ($full, $name, $instance) = $self->oid2name_all($oid);
		return $full;
	}

	sub instance_decode_string {
		my ($self, $instance) = @_;

		# .100.97.116.97.51 = STRING: "data3"
		my $string="";	
		while($instance =~ s/^\.(\d+)//) {
			$string.=chr($1);
		}
		return $string
	}

	sub instance_decode_uuidnum {
		my ($self, $instance) = @_;
		# .36.49.48.51.99.55.102.100.100.45.51.50.56.99.45.54.102.98.101.45.98.55.55.55.45.100.57.98.50.102.48.98.48.50.49.97.57.1
		$instance =~ s/^\.//;
		my @elem=split(/\./, $instance);
		my $count=shift @elem;
		my $uuid=join("", map { chr($_) } splice(@elem, 0, $count));

		return sprintf('"%s".%s', $uuid, join(".", @elem));
	}


	sub value_decode_table {
		my ($self, $value, $def) = @_;

		my $tvalue=$def->{values}{$value};
		if (defined($tvalue)) {
			return { value => $value, string => $tvalue, full => sprintf("%s(%d)", $tvalue, $value) };
		}

		return { value => $value };
	}

	sub value_decode_fixup_decimal {
		my ($self, $value, $def) = @_;

		$value=~s/,//g;

		return { value => $value };
	}

	sub value_decode {
		my ($self, $name, $value) = @_;

		my $def=$nametable->{$name};
		if (!defined($def) || !defined($def->{value})) {
			return { value => $value };
		}

		if ($def->{value} eq "table") {
			return $self->value_decode_table($value, $def);
		} elsif ($def->{value} eq "fixupdecimal") {
			return $self->value_decode_fixup_decimal($value, $def);
		}

		return { value => $value };
	}

	sub instance_decode {
		my ($self, $name, $instance) = @_;

		my $def=$nametable->{$name};
		if (!defined($def) || !defined($def->{instance})) {
			return $instance;
		}

		if ($def->{instance} eq 'string') {
			return $self->instance_decode_string($instance);
		} elsif ($def->{instance} eq 'uuidnum') {
			return $self->instance_decode_uuidnum($instance);
		}

		return $instance;
	}

	sub oid2name_all {
		my ($self, $oid) = @_;

		my $instance="";
		while(length($oid) > 1) {
			my $name=$self->{reversetable}{$oid};
			if (defined($name)) {
				return ( $name . $instance, $name, $self->instance_decode($name, $instance) );
			}

			$oid =~ s/(\.\d+)$//;
			$instance=$1 . $instance;
		}
		die("OID Problem: $oid $instance");
	}

	sub _parse_request {
		my $self=shift;
		my @request=map { $self->name2oid($_) } @_;
		return \@request;
	}

	sub _parse_response {
		my ($self, $roid, $error) = @_;

		my $r={};
		foreach my $k ( keys %{$roid} ) {
			my $value=$roid->{$k};
			my ($full, $name, $instance)=$self->oid2name_all($k);
			$r->{$full}={ name => $name, instance => $instance, value => $self->value_decode($name, $value) };
		}

		$r->{_error}=$error;

		return $r;
	}
	
	sub get {
		my ($self, @args) = @_;

		my $r=$self->{netsnmp}->get_request(-varbindlist =>
			$self->_parse_request(@args));

		return $self->_parse_response($r, $self->{netsnmp}->error());
	}

	sub walk {
		my ($self, $base) = @_;

		my $r=$self->{netsnmp}->get_table(-baseoid => $self->name2oid($base));
		return $self->_parse_response($r, $self->{netsnmp}->error());
	}

1;

package AOS;
	use strict;
	use Net::SNMP;
	use Data::Dumper;
	use List::MoreUtils qw/frequency/;

	sub new {
		my ($class, $snmp) = @_;
		my $self = {
			snmp => $snmp,
		};

	 	bless $self, $class;

		return $self;
	}

	sub merge_tables_by_instance {
		my ($self, @tables) = @_;

		my $result={};

		foreach my $table ( @tables ) {
			foreach my $k ( keys %${table} ) {
				next if ($k =~ /_error/);
				my $v=$table->{$k};

				my $i=$v->{instance};
				$i=~s/^\.//;
				$result->{$i}{$v->{name}}=$v->{value};
			}
		}

		return $result;
	}

	sub temp_status {
		my ($self) = @_;
 		my @temp=values %{$self->{temp}};

		my @status=map {
			$_->{hpSystemAirCurrentTemp}{value} . "/" .
				(($_->{hpSystemAirOverTemp}{string} eq 'no') ? 'ok' : 'fail');
			} @temp;

		return join(",", @status);
	}

	sub temp_ok {
		my ($self) = @_;

 		my @nonok=grep {
			$_->{hpSystemAirOverTemp}{string} ne 'no'
		} values %{$self->{temp}};

		return scalar @nonok == 0;
	}

	sub temp_exists {
		my ($self) = @_;

		return !defined($self->{tempnotavailable});
	}

	sub temp_read {
		my ($self) = @_;

		my $currenttemp=$self->{snmp}->walk("hpSystemAirCurrentTemp");

		if (defined($currenttemp->{_error}) && $currenttemp->{_error} ne '') {
			$self->{tempnotavailable}=1;
			return;
		}
		my $overtemp=$self->{snmp}->walk("hpSystemAirOverTemp");
 		$self->{temp}=$self->merge_tables_by_instance($overtemp, $currenttemp);
	}


	sub ps_status {
		my ($self) = @_;

		my @psus=grep {
				ref $_ eq 'HASH'
					&& $_->{value}{string} ne 'psNotPresent';
			} values %{$self->{ps}};

		my %freq=frequency map { $_->{value}{string}; } @psus;
		my @list=map { sprintf("%s(%d)", $_, $freq{$_}) } keys %freq;

		return join(",", @list);
	}

	sub ps_ok {
		my ($self) = @_;

 		my @nonok=grep {
				ref $_ eq 'HASH'
					&& $_->{value}{string} ne 'psPowered' 
					&& $_->{value}{string} ne 'psNotPresent'
			} values %{$self->{ps}};

		return scalar @nonok == 0;
	}

	sub ps_exists {
		my ($self) = @_;

		return defined($self->{ps});	
	}

	sub ps_read {
		my ($self) = @_;

		my $ps=$self->{snmp}->walk("hpicfPsState");

		if ($ps->{_error} ne '') {
			return;
		}

		$self->{ps}=$ps;
	}

	sub vsf_status {
		my ($self) = @_;

		my @vsfmember=grep {
				ref $_ eq 'HASH'
			} values %{$self->{vsfmemberstate}};

		my %freq=frequency map { $_->{value}{string}; } @vsfmember;
		my @list=map { sprintf("%s(%d)", $_, $freq{$_}) } keys %freq;

		return join(",", @list);
	}

	sub vsf_ok {
		my ($self) = @_;

		my @nonok=grep {
				ref $_ eq 'HASH'
					&& $_->{value}{string} ne 'member' 
					&& $_->{value}{string} ne 'commander'
					&& $_->{value}{string} ne 'standby'
			} values %{$self->{vsfmemberstate}};

		my $operstate=$self->{vsfoperstatus}{"hpicfVsfVCOperStatus.0"}{value}{string};

		return scalar @nonok == 0 && $operstate eq 'active';
	}

	sub vsf_exists {
		my ($self) = @_;

		return !defined($self->{vsfdisabled});
	}

	sub vsf_read {
		my ($self) = @_;

		my $adminstatus=$self->{snmp}->get("hpicfVsfVCAdminStatus.0");

		if ($adminstatus->{_error} ne ''
			|| $adminstatus->{"hpicfVsfVCAdminStatus.0"}{value}{value} eq 'noSuchInstance'
			|| $adminstatus->{"hpicfVsfVCAdminStatus.0"}{value}{value} eq 'noSuchObject'
			|| $adminstatus->{"hpicfVsfVCAdminStatus.0"}{value}{string} eq 'disabled') {
			$self->{vsfdisabled}=1;
			return;
		}

		$self->{vsfoperstatus}=$self->{snmp}->get("hpicfVsfVCOperStatus.0");
		$self->{vsfmemberstate}=$self->{snmp}->walk("hpicfVsfVCMemberState");
	}

	sub sensors_status {
		my ($self) = @_;
	
 		my @sensors=grep {
				$_->{hpicfSensorStatus}{string} ne "notPresent"
			} values %{$self->{sensors}};

		return join(",", map {
				sprintf("%s=%s",
					$_->{hpicfSensorDescr}{value},
					$_->{hpicfSensorStatus}{string});
				}@sensors );
	}

	sub sensors_ok {
		my ($self) = @_;	
	
 		my @sensors=grep {
				$_->{hpicfSensorStatus}{string} ne "notPresent"
				&& $_->{hpicfSensorStatus}{string} ne "good"
			} values %{$self->{sensors}};

		return scalar @sensors == 0;
	}

	sub sensors_exist {
		my ($self) = @_;

		return !defined($self->{sensorsdisabled});
	}

	sub sensors_read {
		my ($self) = @_;

		my $descr=$self->{snmp}->walk("hpicfSensorDescr");

		if ($descr->{_error} ne '') {
			$self->{sensorsdisabled}=1;
			return;
		}
		my $status=$self->{snmp}->walk("hpicfSensorStatus");

 		$self->{sensors}=$self->merge_tables_by_instance($status, $descr);


		# All Sensors notPresent? No sensors to report
		my @sensors=grep {
				$_->{hpicfSensorStatus}{string} ne "notPresent"
			} values %{$self->{sensors}};

		if (scalar @sensors == 0) {
			$self->{sensorsdisabled}=1;
			return
		}
	}

	sub stack_status {
		my ($self) = @_;

		my @status=map {
			sprintf("%s=%s/%s",
				$_,
				$self->{stack}{$_}{hpStackMemberEntryStatus}{string},
				$self->{stack}{$_}{hpStackMemberState}{string})
			} keys %{$self->{stack}};

		return join(",", @status);
	}

	sub stack_ok {
		my ($self) = @_;

		my @nonok=grep {
				$_->{hpStackMemberEntryStatus}{string} ne "active" 
				|| (
					$_->{hpStackMemberState}{string} ne "commander"
					&& $_->{hpStackMemberState}{string} ne "member"
					&& $_->{hpStackMemberState}{string} ne "standby"
				)
			} values %{$self->{stack}};

		return scalar @nonok == 0;
	}

	sub stack_exists {
		my ($self) = @_;

		return defined($self->{stackoperstatus});
	}

	sub stack_read {
		my ($self) = @_;

		my $statusresult=$self->{snmp}->get("hpStackOperStatus.0");
		if (!defined($statusresult) 
			|| $statusresult->{_error} ne '') {
			return;
		}

		if ($statusresult->{"hpStackOperStatus.0"}{value}{value} eq 'noSuchInstance'
			|| $statusresult->{"hpStackOperStatus.0"}{value}{value} eq 'noSuchObject') {
			return;
		}

		my $status=$statusresult->{"hpStackOperStatus.0"}{value}{string};
		if ($status eq 'disabled' || $status eq 'unAvailable') {
			return;
		}

		$self->{stackoperstatus}=$statusresult;	

		my $memberentry=$self->{snmp}->walk("hpStackMemberEntryStatus");
		my $memberstate=$self->{snmp}->walk("hpStackMemberState");

		$self->{stack}=$self->merge_tables_by_instance($memberentry, $memberstate);
	}

	sub fan_status {
		my ($self) = @_;

		my @fans=grep {
				ref $_ eq 'HASH'
			} values %{$self->{fan}};

		my %freq=frequency map { $_->{value}{string}; } @fans;
		my @list=map { sprintf("%s(%d)", $_, $freq{$_}) } keys %freq;

		return join(",", @list);
	}

	sub fan_ok {
		my ($self) = @_;

		my @nonok=grep {
				ref $_ eq 'HASH'
					&& $_->{value}{string} ne 'ok' 
			} values %{$self->{fan}};

		return scalar @nonok == 0;
	}

	sub fan_exists {
		my ($self) = @_;
		return defined($self->{fan});
	}

	sub fan_read {
		my ($self) = @_;

		my $fan=$self->{snmp}->walk("hpicfFanState");

		if ($fan->{_error} ne '') {
			return;
		}	

		$self->{fan}=$fan;
	}

	sub sysDescr {
		my ($self) = @_;

		# Drop long sysDescr
		# Aruba 2930F VSF VC, revision WC.16.11.0003, ROM WC.16.01.0010 (/ws/swbuildm/rel_beluru_qaoff/code/build/lvm(swbuildm_rel_beluru_qaoff_rel_beluru))
		return $self->{sysDescr}{"sysDescr.0"}{value}{value} =~ s/,.*$//r;
	}

	sub firmware_running {
		my ($self) = @_;
		return $self->{firmware}{"hpSwitchOsVersion.0"}{value}{value};
	}

	sub firmware_nextboot {
		my ($self) = @_;
		my $partition=$self->{firmware}{"hpSwitchDefaultBoot.0"}{value}{value};

		my $nextfirmware=$self->{firmware}{"hpSwitchFlashImageVersion.$partition"}{value}{value};

		return $nextfirmware;
	}

	sub firmware_read {
		my ($self) = @_;

		$self->{firmware}=$self->{snmp}->get(
			"hpSwitchOsVersion.0",
			"hpSwitchDefaultBoot.0",
			"hpSwitchFlashImageVersion.1",
			"hpSwitchFlashImageVersion.2"
		);

		print Dumper($self->{firmware});
	}

	sub read {
		my ($self) = @_;

		$self->{sysDescr}=$self->{snmp}->get("sysDescr.0");

		if ($self->{sysDescr}{_error} ne '') {
			return (0, $self->{sysDescr}{_error});
		}

		$self->firmware_read();
		$self->temp_read();
		$self->ps_read();
		$self->vsf_read();
		$self->sensors_read();
		$self->stack_read();
		$self->fan_read();

		return (1, undef);
	}
1;

package main;

	use strict;
	use open IO => ":encoding(utf-8)";
	use open ':std';
	use Data::Dumper;
	use POSIX;
	use List::MoreUtils qw/frequency/;

	use Monitoring::Plugin;
	use Getopt::Long::Descriptive;
	use FindBin qw($Bin $Script);

	my ($opt, $usage) = describe_options(
		"$Script %o <some-arg>",
		[ 'host|H=s',		"ArubaOS hostname", { required => 1 } ],
		[ 'community|C=s',	"SNMP community", { default => 'public' } ],
		[ 'timeout|t=i',	"Timeout", { default => 15 } ],
		[],
		[ 'help',               "print usage message and exit", { shortcircuit => 1 } ],
	);

	print($usage->text), exit if $opt->help;

	my $np = Monitoring::Plugin->new(
		timeout => $opt->timeout
	);

	my $snmp=new SNMP($opt->host, $opt->community);
	my $aos=new AOS($snmp);

	my ($rc, $error)=$aos->read();
	if (!$rc) {
		$np->plugin_exit(UNKNOWN, sprintf("Failed to read: %s", $error));
	}

	$np->add_message(OK, sprintf("%s FWVersion %s", $aos->sysDescr(), $aos->firmware_running()));

	if ($aos->firmware_running() ne $aos->firmware_nextboot()) {
		$np->add_message(WARNING,
			sprintf("Switch needs reboot for firmware upgrade: %s -> %s",
				$aos->firmware_running(), $aos->firmware_nextboot()));
	}

	if ($aos->temp_exists()) {
		$np->add_message($aos->temp_ok() ? OK : CRITICAL,
			sprintf("Temp status: %s", $aos->temp_status()));
	}

	if ($aos->ps_exists()) {
		$np->add_message($aos->ps_ok() ? OK : CRITICAL,
			sprintf("PSU status: %s", $aos->ps_status()));
	}

	if ($aos->vsf_exists()) {
		$np->add_message($aos->vsf_ok() ? OK : CRITICAL,
			sprintf("VSF status: %s", $aos->vsf_status()));
	}

	if ($aos->sensors_exist()) {
		$np->add_message($aos->sensors_ok() ? OK : CRITICAL,
			sprintf("Sensor status: %s", $aos->sensors_status()));
	}

	if ($aos->stack_exists()) {
		$np->add_message($aos->stack_ok() ? OK : CRITICAL,
			sprintf("Stack status: %s", $aos->stack_status()));
	}

	if ($aos->fan_exists()) {
		$np->add_message($aos->fan_ok() ? OK : CRITICAL,
			sprintf("Fan status: %s", $aos->fan_status()));
	}


	my ($code, $message) = $np->check_messages();
	$np->plugin_exit( $code, $message );
1;
